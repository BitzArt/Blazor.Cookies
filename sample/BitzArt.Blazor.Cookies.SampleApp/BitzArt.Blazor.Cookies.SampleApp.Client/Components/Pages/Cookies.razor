@page "/cookies"
@rendermode InteractiveAuto
@inject ICookieService CookieService

<PageTitle>Blazor.Cookies | Interactively rendered page</PageTitle>

<div style="margin-top: 1rem;">
    Current Renderer: @RendererInfo.Name
</div>

<div style="margin-top: 1rem;">
    <InputText @bind-Value="key" placeholder="key" />
    <InputText @bind-Value="value" placeholder="value" />
</div>

<div style="margin-top: 1rem;">
    SameSite Mode: 
    <InputSelect TValue="SameSiteMode?" @bind-Value="sameSiteMode">
        @foreach(var mode in _sameSiteModeValues)
        {
            <option value="@mode">@(mode!.Value.ToString())</option>
        }
    </InputSelect>
</div>

<div style="margin-top: 1rem;">
    <button class="btn btn-primary" @onclick="SetCookieAsync">Set Cookie</button>
    <button class="btn btn-primary" @onclick="RemoveCookieAsync">Remove Cookie</button>
</div>

<div style="margin-top: 1rem;">
    <h3>Cookies</h3>
    <div>
        <pre>
            @JsonSerializer.Serialize(cookies, cookiesSerializerOptions);
        </pre>
    </div>
</div>
@code {

    private IEnumerable<SameSiteMode?> _sameSiteModeValues =
            [
                SameSiteMode.None,
                SameSiteMode.Lax,
                SameSiteMode.Strict
            ];

    private SameSiteMode? sameSiteMode = null;

    private IEnumerable<Cookie>? cookies;

    private JsonSerializerOptions cookiesSerializerOptions = new()
        {
            DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull,
            WriteIndented = true
        };

    private string? key;
    private string? value;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadCookiesAsync();
    }

    private async Task SetCookieAsync()
    {
        var expiration = DateTimeOffset.UtcNow.AddDays(1);

        if (key is not null && value is not null) await CookieService.SetAsync(key, value, expiration, sameSiteMode: sameSiteMode);
    
        await LoadCookiesAsync();
    }

    private async Task RemoveCookieAsync()
    {
        await CookieService.RemoveAsync(key!);

        await LoadCookiesAsync();
    }

    private async Task LoadCookiesAsync()
    {
        cookies = await CookieService.GetAllAsync();

        StateHasChanged();
    }
}
